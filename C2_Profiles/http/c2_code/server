#!/usr/bin/env python3

from sanic import Sanic
from sanic.response import html, redirect, text, raw
from sanic.exceptions import NotFound
import sys
import asyncio
import ssl
from pathlib import Path
import requests
import json
import os
import aiohttp

config = {}

async def print_flush(message):
    print(message)
    sys.stdout.flush()

session = aiohttp.ClientSession()

def server_error_handler(request, exception):
    if request is None:
        print("Invalid HTTP Method - Likely HTTPS trying to talk to HTTP")
        sys.stdout.flush()
        return html("Error: Failed to process request", status=500, headers={})
    return html("Error: Requested URL {} not found".format(request.url), status=404, headers=config[request.app.name]['headers'])


async def agent_message(request, **kwargs):
    global config
    forwarded_headers = {
        "x-forwarded-for": request.headers["x-forwarded-for"] if "x-forwarded-for" in request.headers else request.ip,
        "x-forwarded-url": request.url,
        "x-forwarded-query": request.query_string,
        "x-forwarded-port": str(request.server_port),
        "x-forwarded-cookies": str(request.cookies)
    }
    try:
        if config[request.app.name]['debug']:
            await print_flush("agent_message request from: {} with {} and {}".format(request.url, request.cookies, request.headers))
            await print_flush(" and URI: {}".format(request.query_string))
        if config[request.app.name]['debug']:
            await print_flush("Forwarding along to: {}".format(config['mythic_address']))
        if request.method == "POST":
            # manipulate the request if needed
            async with session.post(config['mythic_address'], data=request.body,  ssl=False, headers={"Mythic": "http", **request.headers, **forwarded_headers}) as resp:
                return raw(await resp.read(), status=resp.status, headers=config[request.app.name]['headers'])
        else:
            # manipulate the request if needed
            async with session.get(config['mythic_address'] + "?{}".format(request.query_string), data=request.body, ssl=False, headers={"Mythic": "http", **request.headers, **forwarded_headers}) as resp:
                return raw(await resp.read(), status=resp.status, headers=config[request.app.name]['headers'])
    except Exception as e:
        if request is None:
            await print_flush("Invalid HTTP Method - Likely HTTPS trying to talk to HTTP")
            return server_error_handler(request, e)
        if config[request.app.name]['debug']:
            await print_flush("error in agent_message: {}".format(str(e)))
        return server_error_handler(request, e)



if __name__ == "__main__":
    sys.path.append("/Mythic/mythic")
    from mythic_c2_container.C2ProfileBase import *
    from mythic_c2_container.MythicCallbackRPC import *
    config_file = open("config.json", 'rb')
    main_config = json.loads(config_file.read().decode('utf-8'))
    print("Opening config and starting instances...")
    sys.stdout.flush()
    # basic mapping of the general endpoints to the real endpoints
    try:
        config['mythic_address'] = os.environ['MYTHIC_ADDRESS']
    except Exception as e:
        print("failed to find MYTHIC_ADDRESS environment variable")
        sys.stdout.flush()
        sys.exit(1)
    # now look at the specific instances to start
    for inst in main_config['instances']:
        config[str(inst['port'])] = {'debug': inst['debug'],
                                     'headers': inst['ServerHeaders']}
        if inst['debug']:
            print("Debugging statements are enabled. This gives more context, but might be a performance hit")
        else:
            print("Debugging statements are disabled")
        sys.stdout.flush()
        # now to create an app instance to handle responses
        app = Sanic(str(inst['port']))
        app.config['REQUEST_MAX_SIZE'] = 1000000000
        app.config['REQUEST_TIMEOUT'] = 600
        app.config['RESPONSE_TIMEOUT'] = 600
        app.add_route(agent_message, "/<uri:path>", methods=['GET','POST'])
        app.add_route(agent_message, "/", methods=['GET','POST'])
        app.error_handler.add(Exception, server_error_handler)
        keyfile = Path(inst['key_path'])
        certfile = Path(inst['cert_path'])
        if keyfile.is_file() and certfile.is_file():
            context = ssl.create_default_context(purpose=ssl.Purpose.CLIENT_AUTH)
            context.load_cert_chain(inst['cert_path'], keyfile=inst['key_path'])
            if inst['debug']:
                server = app.create_server(host="0.0.0.0", port=inst['port'], ssl=context, debug=False, return_asyncio_server=True, access_log=True)
            else:
                server = app.create_server(host="0.0.0.0", port=inst['port'], ssl=context, debug=False, return_asyncio_server=True, access_log=False)
            print("++++++++++++++++++++++++++++++++++++++++++")
            print("++++++++++++++++++++++++++++++++++++++++++")
            print("Successfully using SSL for port {}".format(inst['port']))
            print("++++++++++++++++++++++++++++++++++++++++++")
            print("++++++++++++++++++++++++++++++++++++++++++")
            sys.stdout.flush()
        else:
            if inst["key_path"] != "" or inst["cert_path"] != "":
                print("-----------------------------------------------------------------------------")
                print("-----------------------------------------------------------------------------")
                print("key_path or cert_path is not empty, but at least one of the files cannot be found.")
                print("If you're using the http profile in a Docker container, place your cert and key in Mythic/C2_Profiles/http/c2_code/")
                print("    and set the key_path and cert_path values to just the names of the files")
                print("If you're using the http profile outside of Docker, make sure the paths are absolute and correct")
                print("-----------------------------------------------------------------------------")
                print("-----------------------------------------------------------------------------")
                sys.stdout.flush()
            else:
                print("**************************************************************")
                print("**************************************************************")
                print("No Cert or Key file specified, NOT using SSL for port {}".format(inst['port']))
                print("**************************************************************")
                print("**************************************************************")
                sys.stdout.flush()
            if inst['debug']:
                server = app.create_server(host="0.0.0.0", port=inst['port'], debug=False, return_asyncio_server=True, access_log=True)
            else:
                server = app.create_server(host="0.0.0.0", port=inst['port'], debug=False, return_asyncio_server=True, access_log=False)
        task = asyncio.ensure_future(server)

    try:
        loop = asyncio.get_event_loop()
        def callback(fut):
            try:
                fetch_count = fut.result()
            except:
                print("port already in use")
                sys.stdout.flush()
                sys.exit()
        task.add_done_callback(callback)
        loop.run_forever()
    except:
        sys.exit()
        loop.stop()
